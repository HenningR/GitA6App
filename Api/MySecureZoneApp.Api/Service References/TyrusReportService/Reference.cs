//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MySecureZoneApp.Api.TyrusReportService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WebDocumentIndice", Namespace="http://schemas.datacontract.org/2004/07/Citadel.Web.TyrusServices")]
    [System.SerializableAttribute()]
    public partial class WebDocumentIndice : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long AccountNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short CategoryLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryLDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ClassLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassLDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientSalutationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContractNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateEffectiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DocumentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentWebIndicesDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PartyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScannedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ScannedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StampDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short SubTypeLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubTypeLDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short TypeLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeLDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebCategoryDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short WebCategoryLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WorkflowIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long AccountNumber {
            get {
                return this.AccountNumberField;
            }
            set {
                if ((this.AccountNumberField.Equals(value) != true)) {
                    this.AccountNumberField = value;
                    this.RaisePropertyChanged("AccountNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short CategoryL {
            get {
                return this.CategoryLField;
            }
            set {
                if ((this.CategoryLField.Equals(value) != true)) {
                    this.CategoryLField = value;
                    this.RaisePropertyChanged("CategoryL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryLDescription {
            get {
                return this.CategoryLDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryLDescriptionField, value) != true)) {
                    this.CategoryLDescriptionField = value;
                    this.RaisePropertyChanged("CategoryLDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ClassL {
            get {
                return this.ClassLField;
            }
            set {
                if ((this.ClassLField.Equals(value) != true)) {
                    this.ClassLField = value;
                    this.RaisePropertyChanged("ClassL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClassLDescription {
            get {
                return this.ClassLDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassLDescriptionField, value) != true)) {
                    this.ClassLDescriptionField = value;
                    this.RaisePropertyChanged("ClassLDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientSalutation {
            get {
                return this.ClientSalutationField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientSalutationField, value) != true)) {
                    this.ClientSalutationField = value;
                    this.RaisePropertyChanged("ClientSalutation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContractNumber {
            get {
                return this.ContractNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ContractNumberField, value) != true)) {
                    this.ContractNumberField = value;
                    this.RaisePropertyChanged("ContractNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateEffective {
            get {
                return this.DateEffectiveField;
            }
            set {
                if ((this.DateEffectiveField.Equals(value) != true)) {
                    this.DateEffectiveField = value;
                    this.RaisePropertyChanged("DateEffective");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DocumentID {
            get {
                return this.DocumentIDField;
            }
            set {
                if ((this.DocumentIDField.Equals(value) != true)) {
                    this.DocumentIDField = value;
                    this.RaisePropertyChanged("DocumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentWebIndicesDesc {
            get {
                return this.DocumentWebIndicesDescField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentWebIndicesDescField, value) != true)) {
                    this.DocumentWebIndicesDescField = value;
                    this.RaisePropertyChanged("DocumentWebIndicesDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileExtension {
            get {
                return this.FileExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.FileExtensionField, value) != true)) {
                    this.FileExtensionField = value;
                    this.RaisePropertyChanged("FileExtension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PartyID {
            get {
                return this.PartyIDField;
            }
            set {
                if ((this.PartyIDField.Equals(value) != true)) {
                    this.PartyIDField = value;
                    this.RaisePropertyChanged("PartyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScannedBy {
            get {
                return this.ScannedByField;
            }
            set {
                if ((this.ScannedByField.Equals(value) != true)) {
                    this.ScannedByField = value;
                    this.RaisePropertyChanged("ScannedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ScannedDate {
            get {
                return this.ScannedDateField;
            }
            set {
                if ((this.ScannedDateField.Equals(value) != true)) {
                    this.ScannedDateField = value;
                    this.RaisePropertyChanged("ScannedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StampDate {
            get {
                return this.StampDateField;
            }
            set {
                if ((this.StampDateField.Equals(value) != true)) {
                    this.StampDateField = value;
                    this.RaisePropertyChanged("StampDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short SubTypeL {
            get {
                return this.SubTypeLField;
            }
            set {
                if ((this.SubTypeLField.Equals(value) != true)) {
                    this.SubTypeLField = value;
                    this.RaisePropertyChanged("SubTypeL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubTypeLDescription {
            get {
                return this.SubTypeLDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.SubTypeLDescriptionField, value) != true)) {
                    this.SubTypeLDescriptionField = value;
                    this.RaisePropertyChanged("SubTypeLDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short TypeL {
            get {
                return this.TypeLField;
            }
            set {
                if ((this.TypeLField.Equals(value) != true)) {
                    this.TypeLField = value;
                    this.RaisePropertyChanged("TypeL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeLDescription {
            get {
                return this.TypeLDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeLDescriptionField, value) != true)) {
                    this.TypeLDescriptionField = value;
                    this.RaisePropertyChanged("TypeLDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebCategoryDesc {
            get {
                return this.WebCategoryDescField;
            }
            set {
                if ((object.ReferenceEquals(this.WebCategoryDescField, value) != true)) {
                    this.WebCategoryDescField = value;
                    this.RaisePropertyChanged("WebCategoryDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short WebCategoryL {
            get {
                return this.WebCategoryLField;
            }
            set {
                if ((this.WebCategoryLField.Equals(value) != true)) {
                    this.WebCategoryLField = value;
                    this.RaisePropertyChanged("WebCategoryL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkflowID {
            get {
                return this.WorkflowIDField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowIDField, value) != true)) {
                    this.WorkflowIDField = value;
                    this.RaisePropertyChanged("WorkflowID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TyrusReportService.IReportService")]
    public interface IReportService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetReportCurrencies", ReplyAction="http://tempuri.org/IReportService/GetReportCurrenciesResponse")]
        System.Data.DataTable GetReportCurrencies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetReportCurrencies", ReplyAction="http://tempuri.org/IReportService/GetReportCurrenciesResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetReportCurrenciesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ValutationSummaryHTML", ReplyAction="http://tempuri.org/IReportService/ValutationSummaryHTMLResponse")]
        string ValutationSummaryHTML(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ValutationSummaryHTML", ReplyAction="http://tempuri.org/IReportService/ValutationSummaryHTMLResponse")]
        System.Threading.Tasks.Task<string> ValutationSummaryHTMLAsync(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ValutationSummaryExcel", ReplyAction="http://tempuri.org/IReportService/ValutationSummaryExcelResponse")]
        byte[] ValutationSummaryExcel(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ValutationSummaryExcel", ReplyAction="http://tempuri.org/IReportService/ValutationSummaryExcelResponse")]
        System.Threading.Tasks.Task<byte[]> ValutationSummaryExcelAsync(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ValutationSummaryPdf", ReplyAction="http://tempuri.org/IReportService/ValutationSummaryPdfResponse")]
        byte[] ValutationSummaryPdf(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly, bool logActivity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ValutationSummaryPdf", ReplyAction="http://tempuri.org/IReportService/ValutationSummaryPdfResponse")]
        System.Threading.Tasks.Task<byte[]> ValutationSummaryPdfAsync(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly, bool logActivity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ValutationSummaryMailPDF", ReplyAction="http://tempuri.org/IReportService/ValutationSummaryMailPDFResponse")]
        bool ValutationSummaryMailPDF(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ValutationSummaryMailPDF", ReplyAction="http://tempuri.org/IReportService/ValutationSummaryMailPDFResponse")]
        System.Threading.Tasks.Task<bool> ValutationSummaryMailPDFAsync(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/FundFactSheetList", ReplyAction="http://tempuri.org/IReportService/FundFactSheetListResponse")]
        System.Data.DataTable FundFactSheetList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/FundFactSheetList", ReplyAction="http://tempuri.org/IReportService/FundFactSheetListResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> FundFactSheetListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/FundFactSheet", ReplyAction="http://tempuri.org/IReportService/FundFactSheetResponse")]
        byte[] FundFactSheet(int fundID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/FundFactSheet", ReplyAction="http://tempuri.org/IReportService/FundFactSheetResponse")]
        System.Threading.Tasks.Task<byte[]> FundFactSheetAsync(int fundID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetInvestmentContractNumbers", ReplyAction="http://tempuri.org/IReportService/GetInvestmentContractNumbersResponse")]
        System.Data.DataTable GetInvestmentContractNumbers(System.Guid partyID, System.Guid investmentAccountID, System.DateTime date, bool includeRelated);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetInvestmentContractNumbers", ReplyAction="http://tempuri.org/IReportService/GetInvestmentContractNumbersResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetInvestmentContractNumbersAsync(System.Guid partyID, System.Guid investmentAccountID, System.DateTime date, bool includeRelated);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GenerateQuarterlyReport", ReplyAction="http://tempuri.org/IReportService/GenerateQuarterlyReportResponse")]
        byte[] GenerateQuarterlyReport(System.Guid accID, System.DateTime startDate, System.DateTime endDate, bool isAccountID, bool logActivity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GenerateQuarterlyReport", ReplyAction="http://tempuri.org/IReportService/GenerateQuarterlyReportResponse")]
        System.Threading.Tasks.Task<byte[]> GenerateQuarterlyReportAsync(System.Guid accID, System.DateTime startDate, System.DateTime endDate, bool isAccountID, bool logActivity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getDocuments", ReplyAction="http://tempuri.org/IReportService/getDocumentsResponse")]
        System.Data.DataSet getDocuments(System.Guid partyID, System.Nullable<short> classL, System.Nullable<short> categoryL, System.Nullable<short> typeL, System.Nullable<short> subTypeL, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getDocuments", ReplyAction="http://tempuri.org/IReportService/getDocumentsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getDocumentsAsync(System.Guid partyID, System.Nullable<short> classL, System.Nullable<short> categoryL, System.Nullable<short> typeL, System.Nullable<short> subTypeL, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getUnreadDocumentCount", ReplyAction="http://tempuri.org/IReportService/getUnreadDocumentCountResponse")]
        short getUnreadDocumentCount(System.Guid partyID, System.Nullable<short> classL, System.Nullable<short> categoryL, System.Nullable<short> typeL, System.Nullable<short> subTypeL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getUnreadDocumentCount", ReplyAction="http://tempuri.org/IReportService/getUnreadDocumentCountResponse")]
        System.Threading.Tasks.Task<short> getUnreadDocumentCountAsync(System.Guid partyID, System.Nullable<short> classL, System.Nullable<short> categoryL, System.Nullable<short> typeL, System.Nullable<short> subTypeL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getDocumentData", ReplyAction="http://tempuri.org/IReportService/getDocumentDataResponse")]
        byte[] getDocumentData(System.Guid documentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getDocumentData", ReplyAction="http://tempuri.org/IReportService/getDocumentDataResponse")]
        System.Threading.Tasks.Task<byte[]> getDocumentDataAsync(System.Guid documentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetActiveTransactionCount", ReplyAction="http://tempuri.org/IReportService/GetActiveTransactionCountResponse")]
        int GetActiveTransactionCount(System.Guid clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetActiveTransactionCount", ReplyAction="http://tempuri.org/IReportService/GetActiveTransactionCountResponse")]
        System.Threading.Tasks.Task<int> GetActiveTransactionCountAsync(System.Guid clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getDocumentWebMappings", ReplyAction="http://tempuri.org/IReportService/getDocumentWebMappingsResponse")]
        MySecureZoneApp.Api.TyrusReportService.WebDocumentIndice[] getDocumentWebMappings(System.Guid PartyID, System.Nullable<System.DateTime> dateFrom, System.Nullable<System.DateTime> dateTo, System.Nullable<short> webCategoryL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getDocumentWebMappings", ReplyAction="http://tempuri.org/IReportService/getDocumentWebMappingsResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusReportService.WebDocumentIndice[]> getDocumentWebMappingsAsync(System.Guid PartyID, System.Nullable<System.DateTime> dateFrom, System.Nullable<System.DateTime> dateTo, System.Nullable<short> webCategoryL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/setDocumentWebStatus", ReplyAction="http://tempuri.org/IReportService/setDocumentWebStatusResponse")]
        bool setDocumentWebStatus(System.Guid DocumentID, System.Guid partyID, short webStatusL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/setDocumentWebStatus", ReplyAction="http://tempuri.org/IReportService/setDocumentWebStatusResponse")]
        System.Threading.Tasks.Task<bool> setDocumentWebStatusAsync(System.Guid DocumentID, System.Guid partyID, short webStatusL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/setDocumentWebStatusAll", ReplyAction="http://tempuri.org/IReportService/setDocumentWebStatusAllResponse")]
        bool setDocumentWebStatusAll(System.Collections.Generic.Dictionary<string, string> DocumentItems, short webStatusL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/setDocumentWebStatusAll", ReplyAction="http://tempuri.org/IReportService/setDocumentWebStatusAllResponse")]
        System.Threading.Tasks.Task<bool> setDocumentWebStatusAllAsync(System.Collections.Generic.Dictionary<string, string> DocumentItems, short webStatusL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/switchUser", ReplyAction="http://tempuri.org/IReportService/switchUserResponse")]
        void switchUser(int loggedInUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/switchUser", ReplyAction="http://tempuri.org/IReportService/switchUserResponse")]
        System.Threading.Tasks.Task switchUserAsync(int loggedInUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getWebReports", ReplyAction="http://tempuri.org/IReportService/getWebReportsResponse")]
        MySecureZoneApp.Api.TyrusReportService.getWebReportsResponse getWebReports(MySecureZoneApp.Api.TyrusReportService.getWebReportsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getWebReports", ReplyAction="http://tempuri.org/IReportService/getWebReportsResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusReportService.getWebReportsResponse> getWebReportsAsync(MySecureZoneApp.Api.TyrusReportService.getWebReportsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getWebReportData", ReplyAction="http://tempuri.org/IReportService/getWebReportDataResponse")]
        MySecureZoneApp.Api.TyrusReportService.getWebReportDataResponse getWebReportData(MySecureZoneApp.Api.TyrusReportService.getWebReportDataRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getWebReportData", ReplyAction="http://tempuri.org/IReportService/getWebReportDataResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusReportService.getWebReportDataResponse> getWebReportDataAsync(MySecureZoneApp.Api.TyrusReportService.getWebReportDataRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/updateWebReport", ReplyAction="http://tempuri.org/IReportService/updateWebReportResponse")]
        bool updateWebReport(System.Guid partyWebReportID, int updateType, short reportStatusL, bool isConfirmed, bool isUpdated);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/updateWebReport", ReplyAction="http://tempuri.org/IReportService/updateWebReportResponse")]
        System.Threading.Tasks.Task<bool> updateWebReportAsync(System.Guid partyWebReportID, int updateType, short reportStatusL, bool isConfirmed, bool isUpdated);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getProductSheet", ReplyAction="http://tempuri.org/IReportService/getProductSheetResponse")]
        MySecureZoneApp.Api.TyrusReportService.getProductSheetResponse getProductSheet(MySecureZoneApp.Api.TyrusReportService.getProductSheetRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getProductSheet", ReplyAction="http://tempuri.org/IReportService/getProductSheetResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusReportService.getProductSheetResponse> getProductSheetAsync(MySecureZoneApp.Api.TyrusReportService.getProductSheetRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getSupplierStatement", ReplyAction="http://tempuri.org/IReportService/getSupplierStatementResponse")]
        MySecureZoneApp.Api.TyrusReportService.getSupplierStatementResponse getSupplierStatement(MySecureZoneApp.Api.TyrusReportService.getSupplierStatementRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/getSupplierStatement", ReplyAction="http://tempuri.org/IReportService/getSupplierStatementResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusReportService.getSupplierStatementResponse> getSupplierStatementAsync(MySecureZoneApp.Api.TyrusReportService.getSupplierStatementRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetEACReport", ReplyAction="http://tempuri.org/IReportService/GetEACReportResponse")]
        MySecureZoneApp.Api.TyrusReportService.GetEACReportResponse GetEACReport(MySecureZoneApp.Api.TyrusReportService.GetEACReportRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetEACReport", ReplyAction="http://tempuri.org/IReportService/GetEACReportResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusReportService.GetEACReportResponse> GetEACReportAsync(MySecureZoneApp.Api.TyrusReportService.GetEACReportRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetFeeSummaryReport", ReplyAction="http://tempuri.org/IReportService/GetFeeSummaryReportResponse")]
        MySecureZoneApp.Api.TyrusReportService.GetFeeSummaryReportResponse GetFeeSummaryReport(MySecureZoneApp.Api.TyrusReportService.GetFeeSummaryReportRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetFeeSummaryReport", ReplyAction="http://tempuri.org/IReportService/GetFeeSummaryReportResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusReportService.GetFeeSummaryReportResponse> GetFeeSummaryReportAsync(MySecureZoneApp.Api.TyrusReportService.GetFeeSummaryReportRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getWebReports", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class getWebReportsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Guid partyID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public short reportTypeL;
        
        public getWebReportsRequest() {
        }
        
        public getWebReportsRequest(System.Guid partyID, short reportTypeL) {
            this.partyID = partyID;
            this.reportTypeL = reportTypeL;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getWebReportsResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class getWebReportsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool getWebReportsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Data.DataSet dsReports;
        
        public getWebReportsResponse() {
        }
        
        public getWebReportsResponse(bool getWebReportsResult, System.Data.DataSet dsReports) {
            this.getWebReportsResult = getWebReportsResult;
            this.dsReports = dsReports;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getWebReportData", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class getWebReportDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int ReportType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Guid partyID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public System.Guid accountID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public System.DateTime dateEffective;
        
        public getWebReportDataRequest() {
        }
        
        public getWebReportDataRequest(int ReportType, System.Guid partyID, System.Guid accountID, System.DateTime dateEffective) {
            this.ReportType = ReportType;
            this.partyID = partyID;
            this.accountID = accountID;
            this.dateEffective = dateEffective;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getWebReportDataResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class getWebReportDataResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool getWebReportDataResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Data.DataSet reportData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string resultText;
        
        public getWebReportDataResponse() {
        }
        
        public getWebReportDataResponse(bool getWebReportDataResult, System.Data.DataSet reportData, string resultText) {
            this.getWebReportDataResult = getWebReportDataResult;
            this.reportData = reportData;
            this.resultText = resultText;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getProductSheet", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class getProductSheetRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int productID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.DateTime effectiveDate;
        
        public getProductSheetRequest() {
        }
        
        public getProductSheetRequest(int productID, System.DateTime effectiveDate) {
            this.productID = productID;
            this.effectiveDate = effectiveDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getProductSheetResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class getProductSheetResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public byte[] getProductSheetResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string documentName;
        
        public getProductSheetResponse() {
        }
        
        public getProductSheetResponse(byte[] getProductSheetResult, string documentName) {
            this.getProductSheetResult = getProductSheetResult;
            this.documentName = documentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getSupplierStatement", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class getSupplierStatementRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Guid investmentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string contractNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public System.DateTime fromDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public System.DateTime toDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int ProductID;
        
        public getSupplierStatementRequest() {
        }
        
        public getSupplierStatementRequest(System.Guid investmentID, string contractNumber, System.DateTime fromDate, System.DateTime toDate, int ProductID) {
            this.investmentID = investmentID;
            this.contractNumber = contractNumber;
            this.fromDate = fromDate;
            this.toDate = toDate;
            this.ProductID = ProductID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getSupplierStatementResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class getSupplierStatementResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool getSupplierStatementResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public byte[] resultArr;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string ResultText;
        
        public getSupplierStatementResponse() {
        }
        
        public getSupplierStatementResponse(bool getSupplierStatementResult, byte[] resultArr, string ResultText) {
            this.getSupplierStatementResult = getSupplierStatementResult;
            this.resultArr = resultArr;
            this.ResultText = ResultText;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetEACReport", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetEACReportRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Guid partyWebReportID;
        
        public GetEACReportRequest() {
        }
        
        public GetEACReportRequest(System.Guid partyWebReportID) {
            this.partyWebReportID = partyWebReportID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetEACReportResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetEACReportResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetEACReportResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Data.DataSet eacReportDS;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string resultText;
        
        public GetEACReportResponse() {
        }
        
        public GetEACReportResponse(bool GetEACReportResult, System.Data.DataSet eacReportDS, string resultText) {
            this.GetEACReportResult = GetEACReportResult;
            this.eacReportDS = eacReportDS;
            this.resultText = resultText;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFeeSummaryReport", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetFeeSummaryReportRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Guid partyWebReportID;
        
        public GetFeeSummaryReportRequest() {
        }
        
        public GetFeeSummaryReportRequest(System.Guid partyWebReportID) {
            this.partyWebReportID = partyWebReportID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFeeSummaryReportResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetFeeSummaryReportResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetFeeSummaryReportResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Data.DataSet FeeSummaryReportDS;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public System.Data.DataSet FeeSummaryHeaderDS;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string resultText;
        
        public GetFeeSummaryReportResponse() {
        }
        
        public GetFeeSummaryReportResponse(bool GetFeeSummaryReportResult, System.Data.DataSet FeeSummaryReportDS, System.Data.DataSet FeeSummaryHeaderDS, string resultText) {
            this.GetFeeSummaryReportResult = GetFeeSummaryReportResult;
            this.FeeSummaryReportDS = FeeSummaryReportDS;
            this.FeeSummaryHeaderDS = FeeSummaryHeaderDS;
            this.resultText = resultText;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportServiceChannel : MySecureZoneApp.Api.TyrusReportService.IReportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportServiceClient : System.ServiceModel.ClientBase<MySecureZoneApp.Api.TyrusReportService.IReportService>, MySecureZoneApp.Api.TyrusReportService.IReportService {
        
        public ReportServiceClient() {
        }
        
        public ReportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable GetReportCurrencies() {
            return base.Channel.GetReportCurrencies();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetReportCurrenciesAsync() {
            return base.Channel.GetReportCurrenciesAsync();
        }
        
        public string ValutationSummaryHTML(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly) {
            return base.Channel.ValutationSummaryHTML(clientID, accountID, dateEffective, currency, includeManagedOnly, includeRelated, includeShareBreakdown, externalSupplierOnly);
        }
        
        public System.Threading.Tasks.Task<string> ValutationSummaryHTMLAsync(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly) {
            return base.Channel.ValutationSummaryHTMLAsync(clientID, accountID, dateEffective, currency, includeManagedOnly, includeRelated, includeShareBreakdown, externalSupplierOnly);
        }
        
        public byte[] ValutationSummaryExcel(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly) {
            return base.Channel.ValutationSummaryExcel(clientID, accountID, dateEffective, currency, includeManagedOnly, includeRelated, includeShareBreakdown, externalSupplierOnly);
        }
        
        public System.Threading.Tasks.Task<byte[]> ValutationSummaryExcelAsync(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly) {
            return base.Channel.ValutationSummaryExcelAsync(clientID, accountID, dateEffective, currency, includeManagedOnly, includeRelated, includeShareBreakdown, externalSupplierOnly);
        }
        
        public byte[] ValutationSummaryPdf(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly, bool logActivity) {
            return base.Channel.ValutationSummaryPdf(clientID, accountID, dateEffective, currency, includeManagedOnly, includeRelated, includeShareBreakdown, externalSupplierOnly, logActivity);
        }
        
        public System.Threading.Tasks.Task<byte[]> ValutationSummaryPdfAsync(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly, bool logActivity) {
            return base.Channel.ValutationSummaryPdfAsync(clientID, accountID, dateEffective, currency, includeManagedOnly, includeRelated, includeShareBreakdown, externalSupplierOnly, logActivity);
        }
        
        public bool ValutationSummaryMailPDF(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly) {
            return base.Channel.ValutationSummaryMailPDF(clientID, accountID, dateEffective, currency, includeManagedOnly, includeRelated, includeShareBreakdown, externalSupplierOnly);
        }
        
        public System.Threading.Tasks.Task<bool> ValutationSummaryMailPDFAsync(System.Guid clientID, System.Guid accountID, System.DateTime dateEffective, short currency, bool includeManagedOnly, bool includeRelated, bool includeShareBreakdown, System.Nullable<bool> externalSupplierOnly) {
            return base.Channel.ValutationSummaryMailPDFAsync(clientID, accountID, dateEffective, currency, includeManagedOnly, includeRelated, includeShareBreakdown, externalSupplierOnly);
        }
        
        public System.Data.DataTable FundFactSheetList() {
            return base.Channel.FundFactSheetList();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> FundFactSheetListAsync() {
            return base.Channel.FundFactSheetListAsync();
        }
        
        public byte[] FundFactSheet(int fundID) {
            return base.Channel.FundFactSheet(fundID);
        }
        
        public System.Threading.Tasks.Task<byte[]> FundFactSheetAsync(int fundID) {
            return base.Channel.FundFactSheetAsync(fundID);
        }
        
        public System.Data.DataTable GetInvestmentContractNumbers(System.Guid partyID, System.Guid investmentAccountID, System.DateTime date, bool includeRelated) {
            return base.Channel.GetInvestmentContractNumbers(partyID, investmentAccountID, date, includeRelated);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetInvestmentContractNumbersAsync(System.Guid partyID, System.Guid investmentAccountID, System.DateTime date, bool includeRelated) {
            return base.Channel.GetInvestmentContractNumbersAsync(partyID, investmentAccountID, date, includeRelated);
        }
        
        public byte[] GenerateQuarterlyReport(System.Guid accID, System.DateTime startDate, System.DateTime endDate, bool isAccountID, bool logActivity) {
            return base.Channel.GenerateQuarterlyReport(accID, startDate, endDate, isAccountID, logActivity);
        }
        
        public System.Threading.Tasks.Task<byte[]> GenerateQuarterlyReportAsync(System.Guid accID, System.DateTime startDate, System.DateTime endDate, bool isAccountID, bool logActivity) {
            return base.Channel.GenerateQuarterlyReportAsync(accID, startDate, endDate, isAccountID, logActivity);
        }
        
        public System.Data.DataSet getDocuments(System.Guid partyID, System.Nullable<short> classL, System.Nullable<short> categoryL, System.Nullable<short> typeL, System.Nullable<short> subTypeL, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate) {
            return base.Channel.getDocuments(partyID, classL, categoryL, typeL, subTypeL, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getDocumentsAsync(System.Guid partyID, System.Nullable<short> classL, System.Nullable<short> categoryL, System.Nullable<short> typeL, System.Nullable<short> subTypeL, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate) {
            return base.Channel.getDocumentsAsync(partyID, classL, categoryL, typeL, subTypeL, fromDate, toDate);
        }
        
        public short getUnreadDocumentCount(System.Guid partyID, System.Nullable<short> classL, System.Nullable<short> categoryL, System.Nullable<short> typeL, System.Nullable<short> subTypeL) {
            return base.Channel.getUnreadDocumentCount(partyID, classL, categoryL, typeL, subTypeL);
        }
        
        public System.Threading.Tasks.Task<short> getUnreadDocumentCountAsync(System.Guid partyID, System.Nullable<short> classL, System.Nullable<short> categoryL, System.Nullable<short> typeL, System.Nullable<short> subTypeL) {
            return base.Channel.getUnreadDocumentCountAsync(partyID, classL, categoryL, typeL, subTypeL);
        }
        
        public byte[] getDocumentData(System.Guid documentID) {
            return base.Channel.getDocumentData(documentID);
        }
        
        public System.Threading.Tasks.Task<byte[]> getDocumentDataAsync(System.Guid documentID) {
            return base.Channel.getDocumentDataAsync(documentID);
        }
        
        public int GetActiveTransactionCount(System.Guid clientID) {
            return base.Channel.GetActiveTransactionCount(clientID);
        }
        
        public System.Threading.Tasks.Task<int> GetActiveTransactionCountAsync(System.Guid clientID) {
            return base.Channel.GetActiveTransactionCountAsync(clientID);
        }
        
        public MySecureZoneApp.Api.TyrusReportService.WebDocumentIndice[] getDocumentWebMappings(System.Guid PartyID, System.Nullable<System.DateTime> dateFrom, System.Nullable<System.DateTime> dateTo, System.Nullable<short> webCategoryL) {
            return base.Channel.getDocumentWebMappings(PartyID, dateFrom, dateTo, webCategoryL);
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusReportService.WebDocumentIndice[]> getDocumentWebMappingsAsync(System.Guid PartyID, System.Nullable<System.DateTime> dateFrom, System.Nullable<System.DateTime> dateTo, System.Nullable<short> webCategoryL) {
            return base.Channel.getDocumentWebMappingsAsync(PartyID, dateFrom, dateTo, webCategoryL);
        }
        
        public bool setDocumentWebStatus(System.Guid DocumentID, System.Guid partyID, short webStatusL) {
            return base.Channel.setDocumentWebStatus(DocumentID, partyID, webStatusL);
        }
        
        public System.Threading.Tasks.Task<bool> setDocumentWebStatusAsync(System.Guid DocumentID, System.Guid partyID, short webStatusL) {
            return base.Channel.setDocumentWebStatusAsync(DocumentID, partyID, webStatusL);
        }
        
        public bool setDocumentWebStatusAll(System.Collections.Generic.Dictionary<string, string> DocumentItems, short webStatusL) {
            return base.Channel.setDocumentWebStatusAll(DocumentItems, webStatusL);
        }
        
        public System.Threading.Tasks.Task<bool> setDocumentWebStatusAllAsync(System.Collections.Generic.Dictionary<string, string> DocumentItems, short webStatusL) {
            return base.Channel.setDocumentWebStatusAllAsync(DocumentItems, webStatusL);
        }
        
        public void switchUser(int loggedInUserID) {
            base.Channel.switchUser(loggedInUserID);
        }
        
        public System.Threading.Tasks.Task switchUserAsync(int loggedInUserID) {
            return base.Channel.switchUserAsync(loggedInUserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MySecureZoneApp.Api.TyrusReportService.getWebReportsResponse MySecureZoneApp.Api.TyrusReportService.IReportService.getWebReports(MySecureZoneApp.Api.TyrusReportService.getWebReportsRequest request) {
            return base.Channel.getWebReports(request);
        }
        
        public bool getWebReports(System.Guid partyID, short reportTypeL, out System.Data.DataSet dsReports) {
            MySecureZoneApp.Api.TyrusReportService.getWebReportsRequest inValue = new MySecureZoneApp.Api.TyrusReportService.getWebReportsRequest();
            inValue.partyID = partyID;
            inValue.reportTypeL = reportTypeL;
            MySecureZoneApp.Api.TyrusReportService.getWebReportsResponse retVal = ((MySecureZoneApp.Api.TyrusReportService.IReportService)(this)).getWebReports(inValue);
            dsReports = retVal.dsReports;
            return retVal.getWebReportsResult;
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusReportService.getWebReportsResponse> getWebReportsAsync(MySecureZoneApp.Api.TyrusReportService.getWebReportsRequest request) {
            return base.Channel.getWebReportsAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MySecureZoneApp.Api.TyrusReportService.getWebReportDataResponse MySecureZoneApp.Api.TyrusReportService.IReportService.getWebReportData(MySecureZoneApp.Api.TyrusReportService.getWebReportDataRequest request) {
            return base.Channel.getWebReportData(request);
        }
        
        public bool getWebReportData(int ReportType, System.Guid partyID, System.Guid accountID, System.DateTime dateEffective, out System.Data.DataSet reportData, out string resultText) {
            MySecureZoneApp.Api.TyrusReportService.getWebReportDataRequest inValue = new MySecureZoneApp.Api.TyrusReportService.getWebReportDataRequest();
            inValue.ReportType = ReportType;
            inValue.partyID = partyID;
            inValue.accountID = accountID;
            inValue.dateEffective = dateEffective;
            MySecureZoneApp.Api.TyrusReportService.getWebReportDataResponse retVal = ((MySecureZoneApp.Api.TyrusReportService.IReportService)(this)).getWebReportData(inValue);
            reportData = retVal.reportData;
            resultText = retVal.resultText;
            return retVal.getWebReportDataResult;
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusReportService.getWebReportDataResponse> getWebReportDataAsync(MySecureZoneApp.Api.TyrusReportService.getWebReportDataRequest request) {
            return base.Channel.getWebReportDataAsync(request);
        }
        
        public bool updateWebReport(System.Guid partyWebReportID, int updateType, short reportStatusL, bool isConfirmed, bool isUpdated) {
            return base.Channel.updateWebReport(partyWebReportID, updateType, reportStatusL, isConfirmed, isUpdated);
        }
        
        public System.Threading.Tasks.Task<bool> updateWebReportAsync(System.Guid partyWebReportID, int updateType, short reportStatusL, bool isConfirmed, bool isUpdated) {
            return base.Channel.updateWebReportAsync(partyWebReportID, updateType, reportStatusL, isConfirmed, isUpdated);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MySecureZoneApp.Api.TyrusReportService.getProductSheetResponse MySecureZoneApp.Api.TyrusReportService.IReportService.getProductSheet(MySecureZoneApp.Api.TyrusReportService.getProductSheetRequest request) {
            return base.Channel.getProductSheet(request);
        }
        
        public byte[] getProductSheet(int productID, System.DateTime effectiveDate, out string documentName) {
            MySecureZoneApp.Api.TyrusReportService.getProductSheetRequest inValue = new MySecureZoneApp.Api.TyrusReportService.getProductSheetRequest();
            inValue.productID = productID;
            inValue.effectiveDate = effectiveDate;
            MySecureZoneApp.Api.TyrusReportService.getProductSheetResponse retVal = ((MySecureZoneApp.Api.TyrusReportService.IReportService)(this)).getProductSheet(inValue);
            documentName = retVal.documentName;
            return retVal.getProductSheetResult;
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusReportService.getProductSheetResponse> getProductSheetAsync(MySecureZoneApp.Api.TyrusReportService.getProductSheetRequest request) {
            return base.Channel.getProductSheetAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MySecureZoneApp.Api.TyrusReportService.getSupplierStatementResponse MySecureZoneApp.Api.TyrusReportService.IReportService.getSupplierStatement(MySecureZoneApp.Api.TyrusReportService.getSupplierStatementRequest request) {
            return base.Channel.getSupplierStatement(request);
        }
        
        public bool getSupplierStatement(System.Guid investmentID, string contractNumber, System.DateTime fromDate, System.DateTime toDate, int ProductID, out byte[] resultArr, out string ResultText) {
            MySecureZoneApp.Api.TyrusReportService.getSupplierStatementRequest inValue = new MySecureZoneApp.Api.TyrusReportService.getSupplierStatementRequest();
            inValue.investmentID = investmentID;
            inValue.contractNumber = contractNumber;
            inValue.fromDate = fromDate;
            inValue.toDate = toDate;
            inValue.ProductID = ProductID;
            MySecureZoneApp.Api.TyrusReportService.getSupplierStatementResponse retVal = ((MySecureZoneApp.Api.TyrusReportService.IReportService)(this)).getSupplierStatement(inValue);
            resultArr = retVal.resultArr;
            ResultText = retVal.ResultText;
            return retVal.getSupplierStatementResult;
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusReportService.getSupplierStatementResponse> getSupplierStatementAsync(MySecureZoneApp.Api.TyrusReportService.getSupplierStatementRequest request) {
            return base.Channel.getSupplierStatementAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MySecureZoneApp.Api.TyrusReportService.GetEACReportResponse MySecureZoneApp.Api.TyrusReportService.IReportService.GetEACReport(MySecureZoneApp.Api.TyrusReportService.GetEACReportRequest request) {
            return base.Channel.GetEACReport(request);
        }
        
        public bool GetEACReport(System.Guid partyWebReportID, out System.Data.DataSet eacReportDS, out string resultText) {
            MySecureZoneApp.Api.TyrusReportService.GetEACReportRequest inValue = new MySecureZoneApp.Api.TyrusReportService.GetEACReportRequest();
            inValue.partyWebReportID = partyWebReportID;
            MySecureZoneApp.Api.TyrusReportService.GetEACReportResponse retVal = ((MySecureZoneApp.Api.TyrusReportService.IReportService)(this)).GetEACReport(inValue);
            eacReportDS = retVal.eacReportDS;
            resultText = retVal.resultText;
            return retVal.GetEACReportResult;
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusReportService.GetEACReportResponse> GetEACReportAsync(MySecureZoneApp.Api.TyrusReportService.GetEACReportRequest request) {
            return base.Channel.GetEACReportAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MySecureZoneApp.Api.TyrusReportService.GetFeeSummaryReportResponse MySecureZoneApp.Api.TyrusReportService.IReportService.GetFeeSummaryReport(MySecureZoneApp.Api.TyrusReportService.GetFeeSummaryReportRequest request) {
            return base.Channel.GetFeeSummaryReport(request);
        }
        
        public bool GetFeeSummaryReport(System.Guid partyWebReportID, out System.Data.DataSet FeeSummaryReportDS, out System.Data.DataSet FeeSummaryHeaderDS, out string resultText) {
            MySecureZoneApp.Api.TyrusReportService.GetFeeSummaryReportRequest inValue = new MySecureZoneApp.Api.TyrusReportService.GetFeeSummaryReportRequest();
            inValue.partyWebReportID = partyWebReportID;
            MySecureZoneApp.Api.TyrusReportService.GetFeeSummaryReportResponse retVal = ((MySecureZoneApp.Api.TyrusReportService.IReportService)(this)).GetFeeSummaryReport(inValue);
            FeeSummaryReportDS = retVal.FeeSummaryReportDS;
            FeeSummaryHeaderDS = retVal.FeeSummaryHeaderDS;
            resultText = retVal.resultText;
            return retVal.GetFeeSummaryReportResult;
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusReportService.GetFeeSummaryReportResponse> GetFeeSummaryReportAsync(MySecureZoneApp.Api.TyrusReportService.GetFeeSummaryReportRequest request) {
            return base.Channel.GetFeeSummaryReportAsync(request);
        }
    }
}
