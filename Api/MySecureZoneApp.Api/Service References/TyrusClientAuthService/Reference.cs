//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MySecureZoneApp.Api.TyrusClientAuthService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WebComponent", Namespace="http://schemas.datacontract.org/2004/07/Citadel.Web.TyrusServices")]
    [System.SerializableAttribute()]
    public partial class WebComponent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AreaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ComponentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ControllerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMenuItemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short LevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ParentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short SortIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short WebComponentLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Area {
            get {
                return this.AreaField;
            }
            set {
                if ((object.ReferenceEquals(this.AreaField, value) != true)) {
                    this.AreaField = value;
                    this.RaisePropertyChanged("Area");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Component {
            get {
                return this.ComponentField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentField, value) != true)) {
                    this.ComponentField = value;
                    this.RaisePropertyChanged("Component");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Controller {
            get {
                return this.ControllerField;
            }
            set {
                if ((object.ReferenceEquals(this.ControllerField, value) != true)) {
                    this.ControllerField = value;
                    this.RaisePropertyChanged("Controller");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMenuItem {
            get {
                return this.IsMenuItemField;
            }
            set {
                if ((this.IsMenuItemField.Equals(value) != true)) {
                    this.IsMenuItemField = value;
                    this.RaisePropertyChanged("IsMenuItem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ParentID {
            get {
                return this.ParentIDField;
            }
            set {
                if ((this.ParentIDField.Equals(value) != true)) {
                    this.ParentIDField = value;
                    this.RaisePropertyChanged("ParentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short SortIndex {
            get {
                return this.SortIndexField;
            }
            set {
                if ((this.SortIndexField.Equals(value) != true)) {
                    this.SortIndexField = value;
                    this.RaisePropertyChanged("SortIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short WebComponentL {
            get {
                return this.WebComponentLField;
            }
            set {
                if ((this.WebComponentLField.Equals(value) != true)) {
                    this.WebComponentLField = value;
                    this.RaisePropertyChanged("WebComponentL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WebCredentialsMapping", Namespace="http://schemas.datacontract.org/2004/07/Citadel.Web.TyrusServices")]
    [System.SerializableAttribute()]
    public partial class WebCredentialsMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalUserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PartyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short WebApplicationLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalUserName {
            get {
                return this.ExternalUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalUserNameField, value) != true)) {
                    this.ExternalUserNameField = value;
                    this.RaisePropertyChanged("ExternalUserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PartyId {
            get {
                return this.PartyIdField;
            }
            set {
                if ((this.PartyIdField.Equals(value) != true)) {
                    this.PartyIdField = value;
                    this.RaisePropertyChanged("PartyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short WebApplicationL {
            get {
                return this.WebApplicationLField;
            }
            set {
                if ((this.WebApplicationLField.Equals(value) != true)) {
                    this.WebApplicationLField = value;
                    this.RaisePropertyChanged("WebApplicationL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TyrusClientAuthService.IClientAuthService")]
    public interface IClientAuthService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/testIwinSMS", ReplyAction="http://tempuri.org/IClientAuthService/testIwinSMSResponse")]
        void testIwinSMS(string cellNumber, string testMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/testIwinSMS", ReplyAction="http://tempuri.org/IClientAuthService/testIwinSMSResponse")]
        System.Threading.Tasks.Task testIwinSMSAsync(string cellNumber, string testMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/AuthenticateUser", ReplyAction="http://tempuri.org/IClientAuthService/AuthenticateUserResponse")]
        MySecureZoneApp.Api.TyrusClientAuthService.AuthenticateUserResponse AuthenticateUser(MySecureZoneApp.Api.TyrusClientAuthService.AuthenticateUserRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/AuthenticateUser", ReplyAction="http://tempuri.org/IClientAuthService/AuthenticateUserResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.AuthenticateUserResponse> AuthenticateUserAsync(MySecureZoneApp.Api.TyrusClientAuthService.AuthenticateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/ValidADUser", ReplyAction="http://tempuri.org/IClientAuthService/ValidADUserResponse")]
        MySecureZoneApp.Api.TyrusClientAuthService.ValidADUserResponse ValidADUser(MySecureZoneApp.Api.TyrusClientAuthService.ValidADUserRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/ValidADUser", ReplyAction="http://tempuri.org/IClientAuthService/ValidADUserResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.ValidADUserResponse> ValidADUserAsync(MySecureZoneApp.Api.TyrusClientAuthService.ValidADUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetStaffUserID", ReplyAction="http://tempuri.org/IClientAuthService/GetStaffUserIDResponse")]
        int GetStaffUserID(System.Guid partyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetStaffUserID", ReplyAction="http://tempuri.org/IClientAuthService/GetStaffUserIDResponse")]
        System.Threading.Tasks.Task<int> GetStaffUserIDAsync(System.Guid partyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/SetStaffSharingResults", ReplyAction="http://tempuri.org/IClientAuthService/SetStaffSharingResultsResponse")]
        bool SetStaffSharingResults(int loggedInUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/SetStaffSharingResults", ReplyAction="http://tempuri.org/IClientAuthService/SetStaffSharingResultsResponse")]
        System.Threading.Tasks.Task<bool> SetStaffSharingResultsAsync(int loggedInUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetClientName", ReplyAction="http://tempuri.org/IClientAuthService/GetClientNameResponse")]
        string GetClientName(System.Guid id, short clientNameFormat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetClientName", ReplyAction="http://tempuri.org/IClientAuthService/GetClientNameResponse")]
        System.Threading.Tasks.Task<string> GetClientNameAsync(System.Guid id, short clientNameFormat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetClientDetails", ReplyAction="http://tempuri.org/IClientAuthService/GetClientDetailsResponse")]
        System.Data.DataSet GetClientDetails(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetClientDetails", ReplyAction="http://tempuri.org/IClientAuthService/GetClientDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClientDetailsAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/RegisterClient", ReplyAction="http://tempuri.org/IClientAuthService/RegisterClientResponse")]
        string RegisterClient(string idNumber, string emailAddress, string cellPhoneNumber, short webApplicationL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/RegisterClient", ReplyAction="http://tempuri.org/IClientAuthService/RegisterClientResponse")]
        System.Threading.Tasks.Task<string> RegisterClientAsync(string idNumber, string emailAddress, string cellPhoneNumber, short webApplicationL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/ConfirmRegisterClient", ReplyAction="http://tempuri.org/IClientAuthService/ConfirmRegisterClientResponse")]
        int ConfirmRegisterClient(System.Guid partyID, string emailAddress, string cellPhoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/ConfirmRegisterClient", ReplyAction="http://tempuri.org/IClientAuthService/ConfirmRegisterClientResponse")]
        System.Threading.Tasks.Task<int> ConfirmRegisterClientAsync(System.Guid partyID, string emailAddress, string cellPhoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/getClientEmails", ReplyAction="http://tempuri.org/IClientAuthService/getClientEmailsResponse")]
        System.Data.DataSet getClientEmails(System.Guid partyID, System.Nullable<short> ispreffered);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/getClientEmails", ReplyAction="http://tempuri.org/IClientAuthService/getClientEmailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getClientEmailsAsync(System.Guid partyID, System.Nullable<short> ispreffered);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/getClientTelephones", ReplyAction="http://tempuri.org/IClientAuthService/getClientTelephonesResponse")]
        System.Data.DataSet getClientTelephones(System.Guid partyID, System.Nullable<short> type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/getClientTelephones", ReplyAction="http://tempuri.org/IClientAuthService/getClientTelephonesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getClientTelephonesAsync(System.Guid partyID, System.Nullable<short> type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetClientEMailAddress", ReplyAction="http://tempuri.org/IClientAuthService/GetClientEMailAddressResponse")]
        string GetClientEMailAddress(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetClientEMailAddress", ReplyAction="http://tempuri.org/IClientAuthService/GetClientEMailAddressResponse")]
        System.Threading.Tasks.Task<string> GetClientEMailAddressAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/ResetPassword", ReplyAction="http://tempuri.org/IClientAuthService/ResetPasswordResponse")]
        MySecureZoneApp.Api.TyrusClientAuthService.ResetPasswordResponse ResetPassword(MySecureZoneApp.Api.TyrusClientAuthService.ResetPasswordRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/ResetPassword", ReplyAction="http://tempuri.org/IClientAuthService/ResetPasswordResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.ResetPasswordResponse> ResetPasswordAsync(MySecureZoneApp.Api.TyrusClientAuthService.ResetPasswordRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/ChangePassword", ReplyAction="http://tempuri.org/IClientAuthService/ChangePasswordResponse")]
        bool ChangePassword(System.Guid partyID, string newPassword, System.Nullable<int> action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/ChangePassword", ReplyAction="http://tempuri.org/IClientAuthService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(System.Guid partyID, string newPassword, System.Nullable<int> action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/ChangeUsername", ReplyAction="http://tempuri.org/IClientAuthService/ChangeUsernameResponse")]
        bool ChangeUsername(System.Guid partyID, string newUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/ChangeUsername", ReplyAction="http://tempuri.org/IClientAuthService/ChangeUsernameResponse")]
        System.Threading.Tasks.Task<bool> ChangeUsernameAsync(System.Guid partyID, string newUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/WebRegistrationExist", ReplyAction="http://tempuri.org/IClientAuthService/WebRegistrationExistResponse")]
        bool WebRegistrationExist(System.Guid partyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/WebRegistrationExist", ReplyAction="http://tempuri.org/IClientAuthService/WebRegistrationExistResponse")]
        System.Threading.Tasks.Task<bool> WebRegistrationExistAsync(System.Guid partyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetActiveWebcomponents", ReplyAction="http://tempuri.org/IClientAuthService/GetActiveWebcomponentsResponse")]
        MySecureZoneApp.Api.TyrusClientAuthService.WebComponent[] GetActiveWebcomponents(System.Guid partyId, short webApplicationL, bool admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetActiveWebcomponents", ReplyAction="http://tempuri.org/IClientAuthService/GetActiveWebcomponentsResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.WebComponent[]> GetActiveWebcomponentsAsync(System.Guid partyId, short webApplicationL, bool admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetExternalWebCredentialMapping", ReplyAction="http://tempuri.org/IClientAuthService/GetExternalWebCredentialMappingResponse")]
        MySecureZoneApp.Api.TyrusClientAuthService.WebCredentialsMapping[] GetExternalWebCredentialMapping(System.Guid partyId, short webApplicationL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetExternalWebCredentialMapping", ReplyAction="http://tempuri.org/IClientAuthService/GetExternalWebCredentialMappingResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.WebCredentialsMapping[]> GetExternalWebCredentialMappingAsync(System.Guid partyId, short webApplicationL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/getAccountJurisdictions", ReplyAction="http://tempuri.org/IClientAuthService/getAccountJurisdictionsResponse")]
        int[] getAccountJurisdictions(System.Guid clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/getAccountJurisdictions", ReplyAction="http://tempuri.org/IClientAuthService/getAccountJurisdictionsResponse")]
        System.Threading.Tasks.Task<int[]> getAccountJurisdictionsAsync(System.Guid clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/getCitationType", ReplyAction="http://tempuri.org/IClientAuthService/getCitationTypeResponse")]
        string getCitationType(System.Guid clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/getCitationType", ReplyAction="http://tempuri.org/IClientAuthService/getCitationTypeResponse")]
        System.Threading.Tasks.Task<string> getCitationTypeAsync(System.Guid clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/DecryptClientInfo", ReplyAction="http://tempuri.org/IClientAuthService/DecryptClientInfoResponse")]
        string DecryptClientInfo(string info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/DecryptClientInfo", ReplyAction="http://tempuri.org/IClientAuthService/DecryptClientInfoResponse")]
        System.Threading.Tasks.Task<string> DecryptClientInfoAsync(string info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/switchUser", ReplyAction="http://tempuri.org/IClientAuthService/switchUserResponse")]
        void switchUser(int loggedInUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/switchUser", ReplyAction="http://tempuri.org/IClientAuthService/switchUserResponse")]
        System.Threading.Tasks.Task switchUserAsync(int loggedInUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetStaffSalutation", ReplyAction="http://tempuri.org/IClientAuthService/GetStaffSalutationResponse")]
        string GetStaffSalutation(int SID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetStaffSalutation", ReplyAction="http://tempuri.org/IClientAuthService/GetStaffSalutationResponse")]
        System.Threading.Tasks.Task<string> GetStaffSalutationAsync(int SID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetListRelatedAccounts", ReplyAction="http://tempuri.org/IClientAuthService/GetListRelatedAccountsResponse")]
        System.Data.DataTable GetListRelatedAccounts(System.Guid partyID, bool includeRelatedClients, bool includeDeletedClients, System.Guid preselectedAccountID, int loggedInUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetListRelatedAccounts", ReplyAction="http://tempuri.org/IClientAuthService/GetListRelatedAccountsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetListRelatedAccountsAsync(System.Guid partyID, bool includeRelatedClients, bool includeDeletedClients, System.Guid preselectedAccountID, int loggedInUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/hasActiveInvestments", ReplyAction="http://tempuri.org/IClientAuthService/hasActiveInvestmentsResponse")]
        bool hasActiveInvestments(System.Guid clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/hasActiveInvestments", ReplyAction="http://tempuri.org/IClientAuthService/hasActiveInvestmentsResponse")]
        System.Threading.Tasks.Task<bool> hasActiveInvestmentsAsync(System.Guid clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/AllLinkedActiveInvestments", ReplyAction="http://tempuri.org/IClientAuthService/AllLinkedActiveInvestmentsResponse")]
        MySecureZoneApp.Api.TyrusClientAuthService.AllLinkedActiveInvestmentsResponse AllLinkedActiveInvestments(MySecureZoneApp.Api.TyrusClientAuthService.AllLinkedActiveInvestmentsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/AllLinkedActiveInvestments", ReplyAction="http://tempuri.org/IClientAuthService/AllLinkedActiveInvestmentsResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.AllLinkedActiveInvestmentsResponse> AllLinkedActiveInvestmentsAsync(MySecureZoneApp.Api.TyrusClientAuthService.AllLinkedActiveInvestmentsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/hasClientGotValidatedWill", ReplyAction="http://tempuri.org/IClientAuthService/hasClientGotValidatedWillResponse")]
        MySecureZoneApp.Api.TyrusClientAuthService.hasClientGotValidatedWillResponse hasClientGotValidatedWill(MySecureZoneApp.Api.TyrusClientAuthService.hasClientGotValidatedWillRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/hasClientGotValidatedWill", ReplyAction="http://tempuri.org/IClientAuthService/hasClientGotValidatedWillResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.hasClientGotValidatedWillResponse> hasClientGotValidatedWillAsync(MySecureZoneApp.Api.TyrusClientAuthService.hasClientGotValidatedWillRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetSecureZoneClientDetails", ReplyAction="http://tempuri.org/IClientAuthService/GetSecureZoneClientDetailsResponse")]
        System.Data.DataTable GetSecureZoneClientDetails(System.Guid partyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetSecureZoneClientDetails", ReplyAction="http://tempuri.org/IClientAuthService/GetSecureZoneClientDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSecureZoneClientDetailsAsync(System.Guid partyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetSecureZoneClientGrid", ReplyAction="http://tempuri.org/IClientAuthService/GetSecureZoneClientGridResponse")]
        System.Data.DataTable GetSecureZoneClientGrid(string idNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetSecureZoneClientGrid", ReplyAction="http://tempuri.org/IClientAuthService/GetSecureZoneClientGridResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSecureZoneClientGridAsync(string idNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/UpdatePartyWebRegistrationStatus", ReplyAction="http://tempuri.org/IClientAuthService/UpdatePartyWebRegistrationStatusResponse")]
        bool UpdatePartyWebRegistrationStatus(System.Guid partyID, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/UpdatePartyWebRegistrationStatus", ReplyAction="http://tempuri.org/IClientAuthService/UpdatePartyWebRegistrationStatusResponse")]
        System.Threading.Tasks.Task<bool> UpdatePartyWebRegistrationStatusAsync(System.Guid partyID, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/Activate_ResetWebRegisteration", ReplyAction="http://tempuri.org/IClientAuthService/Activate_ResetWebRegisterationResponse")]
        System.Data.DataSet Activate_ResetWebRegisteration(System.Guid partyID, System.Guid staffPartyID, int staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/Activate_ResetWebRegisteration", ReplyAction="http://tempuri.org/IClientAuthService/Activate_ResetWebRegisterationResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> Activate_ResetWebRegisterationAsync(System.Guid partyID, System.Guid staffPartyID, int staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/Deactivate_WebRegisteration", ReplyAction="http://tempuri.org/IClientAuthService/Deactivate_WebRegisterationResponse")]
        bool Deactivate_WebRegisteration(System.Guid partyID, System.Guid staffPartyID, int staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/Deactivate_WebRegisteration", ReplyAction="http://tempuri.org/IClientAuthService/Deactivate_WebRegisterationResponse")]
        System.Threading.Tasks.Task<bool> Deactivate_WebRegisterationAsync(System.Guid partyID, System.Guid staffPartyID, int staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetMySecureZoneActivities", ReplyAction="http://tempuri.org/IClientAuthService/GetMySecureZoneActivitiesResponse")]
        System.Data.DataSet GetMySecureZoneActivities(System.Guid partyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/GetMySecureZoneActivities", ReplyAction="http://tempuri.org/IClientAuthService/GetMySecureZoneActivitiesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMySecureZoneActivitiesAsync(System.Guid partyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/AddWebActivity", ReplyAction="http://tempuri.org/IClientAuthService/AddWebActivityResponse")]
        MySecureZoneApp.Api.TyrusClientAuthService.AddWebActivityResponse AddWebActivity(MySecureZoneApp.Api.TyrusClientAuthService.AddWebActivityRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/AddWebActivity", ReplyAction="http://tempuri.org/IClientAuthService/AddWebActivityResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.AddWebActivityResponse> AddWebActivityAsync(MySecureZoneApp.Api.TyrusClientAuthService.AddWebActivityRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/EncryptClientID", ReplyAction="http://tempuri.org/IClientAuthService/EncryptClientIDResponse")]
        string EncryptClientID(System.Guid partyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/EncryptClientID", ReplyAction="http://tempuri.org/IClientAuthService/EncryptClientIDResponse")]
        System.Threading.Tasks.Task<string> EncryptClientIDAsync(System.Guid partyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/DecryptClientID", ReplyAction="http://tempuri.org/IClientAuthService/DecryptClientIDResponse")]
        MySecureZoneApp.Api.TyrusClientAuthService.DecryptClientIDResponse DecryptClientID(MySecureZoneApp.Api.TyrusClientAuthService.DecryptClientIDRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientAuthService/DecryptClientID", ReplyAction="http://tempuri.org/IClientAuthService/DecryptClientIDResponse")]
        System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.DecryptClientIDResponse> DecryptClientIDAsync(MySecureZoneApp.Api.TyrusClientAuthService.DecryptClientIDRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuthenticateUser", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AuthenticateUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string userBrowser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public short webApplicationL;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public bool validateOnly;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string clientName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public short lockoutTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public bool isActive;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public bool isValidated;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public string emailAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=10)]
        public int staffID;
        
        public AuthenticateUserRequest() {
        }
        
        public AuthenticateUserRequest(string username, string password, string userBrowser, short webApplicationL, bool validateOnly, string clientName, short lockoutTime, bool isActive, bool isValidated, string emailAddress, int staffID) {
            this.username = username;
            this.password = password;
            this.userBrowser = userBrowser;
            this.webApplicationL = webApplicationL;
            this.validateOnly = validateOnly;
            this.clientName = clientName;
            this.lockoutTime = lockoutTime;
            this.isActive = isActive;
            this.isValidated = isValidated;
            this.emailAddress = emailAddress;
            this.staffID = staffID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuthenticateUserResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AuthenticateUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Guid AuthenticateUserResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string clientName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public short lockoutTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public bool isActive;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public bool isValidated;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string emailAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public int staffID;
        
        public AuthenticateUserResponse() {
        }
        
        public AuthenticateUserResponse(System.Guid AuthenticateUserResult, string clientName, short lockoutTime, bool isActive, bool isValidated, string emailAddress, int staffID) {
            this.AuthenticateUserResult = AuthenticateUserResult;
            this.clientName = clientName;
            this.lockoutTime = lockoutTime;
            this.isActive = isActive;
            this.isValidated = isValidated;
            this.emailAddress = emailAddress;
            this.staffID = staffID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidADUser", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidADUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string email;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string surname;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string givenName;
        
        public ValidADUserRequest() {
        }
        
        public ValidADUserRequest(string email, string surname, string givenName) {
            this.email = email;
            this.surname = surname;
            this.givenName = givenName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidADUserResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidADUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool ValidADUserResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public short staffSID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public System.Guid staffID;
        
        public ValidADUserResponse() {
        }
        
        public ValidADUserResponse(bool ValidADUserResult, short staffSID, System.Guid staffID) {
            this.ValidADUserResult = ValidADUserResult;
            this.staffSID = staffSID;
            this.staffID = staffID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ResetPassword", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ResetPasswordRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string email;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string error;
        
        public ResetPasswordRequest() {
        }
        
        public ResetPasswordRequest(string email, string error) {
            this.email = email;
            this.error = error;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ResetPasswordResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ResetPasswordResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool ResetPasswordResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string error;
        
        public ResetPasswordResponse() {
        }
        
        public ResetPasswordResponse(bool ResetPasswordResult, string error) {
            this.ResetPasswordResult = ResetPasswordResult;
            this.error = error;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AllLinkedActiveInvestments", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AllLinkedActiveInvestmentsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Guid clientID;
        
        public AllLinkedActiveInvestmentsRequest() {
        }
        
        public AllLinkedActiveInvestmentsRequest(System.Guid clientID) {
            this.clientID = clientID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AllLinkedActiveInvestmentsResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AllLinkedActiveInvestmentsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool AllLinkedActiveInvestmentsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool linkAccountActiveInvestment;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public System.Guid linkedClientID;
        
        public AllLinkedActiveInvestmentsResponse() {
        }
        
        public AllLinkedActiveInvestmentsResponse(bool AllLinkedActiveInvestmentsResult, bool linkAccountActiveInvestment, System.Guid linkedClientID) {
            this.AllLinkedActiveInvestmentsResult = AllLinkedActiveInvestmentsResult;
            this.linkAccountActiveInvestment = linkAccountActiveInvestment;
            this.linkedClientID = linkedClientID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="hasClientGotValidatedWill", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class hasClientGotValidatedWillRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Guid partyID;
        
        public hasClientGotValidatedWillRequest() {
        }
        
        public hasClientGotValidatedWillRequest(System.Guid partyID) {
            this.partyID = partyID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="hasClientGotValidatedWillResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class hasClientGotValidatedWillResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool hasClientGotValidatedWillResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string reason;
        
        public hasClientGotValidatedWillResponse() {
        }
        
        public hasClientGotValidatedWillResponse(bool hasClientGotValidatedWillResult, string reason) {
            this.hasClientGotValidatedWillResult = hasClientGotValidatedWillResult;
            this.reason = reason;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddWebActivity", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AddWebActivityRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Guid partyID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int activityL;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string comment;
        
        public AddWebActivityRequest() {
        }
        
        public AddWebActivityRequest(System.Guid partyID, int activityL, string comment) {
            this.partyID = partyID;
            this.activityL = activityL;
            this.comment = comment;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddWebActivityResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AddWebActivityResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool AddWebActivityResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string ResultInfo;
        
        public AddWebActivityResponse() {
        }
        
        public AddWebActivityResponse(bool AddWebActivityResult, string ResultInfo) {
            this.AddWebActivityResult = AddWebActivityResult;
            this.ResultInfo = ResultInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DecryptClientID", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DecryptClientIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string encryptedPartyID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool checkExpireLink;
        
        public DecryptClientIDRequest() {
        }
        
        public DecryptClientIDRequest(string encryptedPartyID, bool checkExpireLink) {
            this.encryptedPartyID = encryptedPartyID;
            this.checkExpireLink = checkExpireLink;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DecryptClientIDResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DecryptClientIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string DecryptClientIDResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool isLinkExpire;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string ExpireLinkMessage;
        
        public DecryptClientIDResponse() {
        }
        
        public DecryptClientIDResponse(string DecryptClientIDResult, bool isLinkExpire, string ExpireLinkMessage) {
            this.DecryptClientIDResult = DecryptClientIDResult;
            this.isLinkExpire = isLinkExpire;
            this.ExpireLinkMessage = ExpireLinkMessage;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientAuthServiceChannel : MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientAuthServiceClient : System.ServiceModel.ClientBase<MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService>, MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService {
        
        public ClientAuthServiceClient() {
        }
        
        public ClientAuthServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientAuthServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientAuthServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientAuthServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void testIwinSMS(string cellNumber, string testMessage) {
            base.Channel.testIwinSMS(cellNumber, testMessage);
        }
        
        public System.Threading.Tasks.Task testIwinSMSAsync(string cellNumber, string testMessage) {
            return base.Channel.testIwinSMSAsync(cellNumber, testMessage);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MySecureZoneApp.Api.TyrusClientAuthService.AuthenticateUserResponse MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService.AuthenticateUser(MySecureZoneApp.Api.TyrusClientAuthService.AuthenticateUserRequest request) {
            return base.Channel.AuthenticateUser(request);
        }
        
        public System.Guid AuthenticateUser(string username, string password, string userBrowser, short webApplicationL, bool validateOnly, ref string clientName, ref short lockoutTime, ref bool isActive, ref bool isValidated, ref string emailAddress, ref int staffID) {
            MySecureZoneApp.Api.TyrusClientAuthService.AuthenticateUserRequest inValue = new MySecureZoneApp.Api.TyrusClientAuthService.AuthenticateUserRequest();
            inValue.username = username;
            inValue.password = password;
            inValue.userBrowser = userBrowser;
            inValue.webApplicationL = webApplicationL;
            inValue.validateOnly = validateOnly;
            inValue.clientName = clientName;
            inValue.lockoutTime = lockoutTime;
            inValue.isActive = isActive;
            inValue.isValidated = isValidated;
            inValue.emailAddress = emailAddress;
            inValue.staffID = staffID;
            MySecureZoneApp.Api.TyrusClientAuthService.AuthenticateUserResponse retVal = ((MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService)(this)).AuthenticateUser(inValue);
            clientName = retVal.clientName;
            lockoutTime = retVal.lockoutTime;
            isActive = retVal.isActive;
            isValidated = retVal.isValidated;
            emailAddress = retVal.emailAddress;
            staffID = retVal.staffID;
            return retVal.AuthenticateUserResult;
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.AuthenticateUserResponse> AuthenticateUserAsync(MySecureZoneApp.Api.TyrusClientAuthService.AuthenticateUserRequest request) {
            return base.Channel.AuthenticateUserAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MySecureZoneApp.Api.TyrusClientAuthService.ValidADUserResponse MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService.ValidADUser(MySecureZoneApp.Api.TyrusClientAuthService.ValidADUserRequest request) {
            return base.Channel.ValidADUser(request);
        }
        
        public bool ValidADUser(string email, string surname, string givenName, out short staffSID, out System.Guid staffID) {
            MySecureZoneApp.Api.TyrusClientAuthService.ValidADUserRequest inValue = new MySecureZoneApp.Api.TyrusClientAuthService.ValidADUserRequest();
            inValue.email = email;
            inValue.surname = surname;
            inValue.givenName = givenName;
            MySecureZoneApp.Api.TyrusClientAuthService.ValidADUserResponse retVal = ((MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService)(this)).ValidADUser(inValue);
            staffSID = retVal.staffSID;
            staffID = retVal.staffID;
            return retVal.ValidADUserResult;
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.ValidADUserResponse> ValidADUserAsync(MySecureZoneApp.Api.TyrusClientAuthService.ValidADUserRequest request) {
            return base.Channel.ValidADUserAsync(request);
        }
        
        public int GetStaffUserID(System.Guid partyID) {
            return base.Channel.GetStaffUserID(partyID);
        }
        
        public System.Threading.Tasks.Task<int> GetStaffUserIDAsync(System.Guid partyID) {
            return base.Channel.GetStaffUserIDAsync(partyID);
        }
        
        public bool SetStaffSharingResults(int loggedInUserID) {
            return base.Channel.SetStaffSharingResults(loggedInUserID);
        }
        
        public System.Threading.Tasks.Task<bool> SetStaffSharingResultsAsync(int loggedInUserID) {
            return base.Channel.SetStaffSharingResultsAsync(loggedInUserID);
        }
        
        public string GetClientName(System.Guid id, short clientNameFormat) {
            return base.Channel.GetClientName(id, clientNameFormat);
        }
        
        public System.Threading.Tasks.Task<string> GetClientNameAsync(System.Guid id, short clientNameFormat) {
            return base.Channel.GetClientNameAsync(id, clientNameFormat);
        }
        
        public System.Data.DataSet GetClientDetails(System.Guid id) {
            return base.Channel.GetClientDetails(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClientDetailsAsync(System.Guid id) {
            return base.Channel.GetClientDetailsAsync(id);
        }
        
        public string RegisterClient(string idNumber, string emailAddress, string cellPhoneNumber, short webApplicationL) {
            return base.Channel.RegisterClient(idNumber, emailAddress, cellPhoneNumber, webApplicationL);
        }
        
        public System.Threading.Tasks.Task<string> RegisterClientAsync(string idNumber, string emailAddress, string cellPhoneNumber, short webApplicationL) {
            return base.Channel.RegisterClientAsync(idNumber, emailAddress, cellPhoneNumber, webApplicationL);
        }
        
        public int ConfirmRegisterClient(System.Guid partyID, string emailAddress, string cellPhoneNumber) {
            return base.Channel.ConfirmRegisterClient(partyID, emailAddress, cellPhoneNumber);
        }
        
        public System.Threading.Tasks.Task<int> ConfirmRegisterClientAsync(System.Guid partyID, string emailAddress, string cellPhoneNumber) {
            return base.Channel.ConfirmRegisterClientAsync(partyID, emailAddress, cellPhoneNumber);
        }
        
        public System.Data.DataSet getClientEmails(System.Guid partyID, System.Nullable<short> ispreffered) {
            return base.Channel.getClientEmails(partyID, ispreffered);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getClientEmailsAsync(System.Guid partyID, System.Nullable<short> ispreffered) {
            return base.Channel.getClientEmailsAsync(partyID, ispreffered);
        }
        
        public System.Data.DataSet getClientTelephones(System.Guid partyID, System.Nullable<short> type) {
            return base.Channel.getClientTelephones(partyID, type);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getClientTelephonesAsync(System.Guid partyID, System.Nullable<short> type) {
            return base.Channel.getClientTelephonesAsync(partyID, type);
        }
        
        public string GetClientEMailAddress(System.Guid id) {
            return base.Channel.GetClientEMailAddress(id);
        }
        
        public System.Threading.Tasks.Task<string> GetClientEMailAddressAsync(System.Guid id) {
            return base.Channel.GetClientEMailAddressAsync(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MySecureZoneApp.Api.TyrusClientAuthService.ResetPasswordResponse MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService.ResetPassword(MySecureZoneApp.Api.TyrusClientAuthService.ResetPasswordRequest request) {
            return base.Channel.ResetPassword(request);
        }
        
        public bool ResetPassword(string email, ref string error) {
            MySecureZoneApp.Api.TyrusClientAuthService.ResetPasswordRequest inValue = new MySecureZoneApp.Api.TyrusClientAuthService.ResetPasswordRequest();
            inValue.email = email;
            inValue.error = error;
            MySecureZoneApp.Api.TyrusClientAuthService.ResetPasswordResponse retVal = ((MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService)(this)).ResetPassword(inValue);
            error = retVal.error;
            return retVal.ResetPasswordResult;
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.ResetPasswordResponse> ResetPasswordAsync(MySecureZoneApp.Api.TyrusClientAuthService.ResetPasswordRequest request) {
            return base.Channel.ResetPasswordAsync(request);
        }
        
        public bool ChangePassword(System.Guid partyID, string newPassword, System.Nullable<int> action) {
            return base.Channel.ChangePassword(partyID, newPassword, action);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(System.Guid partyID, string newPassword, System.Nullable<int> action) {
            return base.Channel.ChangePasswordAsync(partyID, newPassword, action);
        }
        
        public bool ChangeUsername(System.Guid partyID, string newUsername) {
            return base.Channel.ChangeUsername(partyID, newUsername);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUsernameAsync(System.Guid partyID, string newUsername) {
            return base.Channel.ChangeUsernameAsync(partyID, newUsername);
        }
        
        public bool WebRegistrationExist(System.Guid partyID) {
            return base.Channel.WebRegistrationExist(partyID);
        }
        
        public System.Threading.Tasks.Task<bool> WebRegistrationExistAsync(System.Guid partyID) {
            return base.Channel.WebRegistrationExistAsync(partyID);
        }
        
        public MySecureZoneApp.Api.TyrusClientAuthService.WebComponent[] GetActiveWebcomponents(System.Guid partyId, short webApplicationL, bool admin) {
            return base.Channel.GetActiveWebcomponents(partyId, webApplicationL, admin);
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.WebComponent[]> GetActiveWebcomponentsAsync(System.Guid partyId, short webApplicationL, bool admin) {
            return base.Channel.GetActiveWebcomponentsAsync(partyId, webApplicationL, admin);
        }
        
        public MySecureZoneApp.Api.TyrusClientAuthService.WebCredentialsMapping[] GetExternalWebCredentialMapping(System.Guid partyId, short webApplicationL) {
            return base.Channel.GetExternalWebCredentialMapping(partyId, webApplicationL);
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.WebCredentialsMapping[]> GetExternalWebCredentialMappingAsync(System.Guid partyId, short webApplicationL) {
            return base.Channel.GetExternalWebCredentialMappingAsync(partyId, webApplicationL);
        }
        
        public int[] getAccountJurisdictions(System.Guid clientID) {
            return base.Channel.getAccountJurisdictions(clientID);
        }
        
        public System.Threading.Tasks.Task<int[]> getAccountJurisdictionsAsync(System.Guid clientID) {
            return base.Channel.getAccountJurisdictionsAsync(clientID);
        }
        
        public string getCitationType(System.Guid clientID) {
            return base.Channel.getCitationType(clientID);
        }
        
        public System.Threading.Tasks.Task<string> getCitationTypeAsync(System.Guid clientID) {
            return base.Channel.getCitationTypeAsync(clientID);
        }
        
        public string DecryptClientInfo(string info) {
            return base.Channel.DecryptClientInfo(info);
        }
        
        public System.Threading.Tasks.Task<string> DecryptClientInfoAsync(string info) {
            return base.Channel.DecryptClientInfoAsync(info);
        }
        
        public void switchUser(int loggedInUserID) {
            base.Channel.switchUser(loggedInUserID);
        }
        
        public System.Threading.Tasks.Task switchUserAsync(int loggedInUserID) {
            return base.Channel.switchUserAsync(loggedInUserID);
        }
        
        public string GetStaffSalutation(int SID) {
            return base.Channel.GetStaffSalutation(SID);
        }
        
        public System.Threading.Tasks.Task<string> GetStaffSalutationAsync(int SID) {
            return base.Channel.GetStaffSalutationAsync(SID);
        }
        
        public System.Data.DataTable GetListRelatedAccounts(System.Guid partyID, bool includeRelatedClients, bool includeDeletedClients, System.Guid preselectedAccountID, int loggedInUserID) {
            return base.Channel.GetListRelatedAccounts(partyID, includeRelatedClients, includeDeletedClients, preselectedAccountID, loggedInUserID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetListRelatedAccountsAsync(System.Guid partyID, bool includeRelatedClients, bool includeDeletedClients, System.Guid preselectedAccountID, int loggedInUserID) {
            return base.Channel.GetListRelatedAccountsAsync(partyID, includeRelatedClients, includeDeletedClients, preselectedAccountID, loggedInUserID);
        }
        
        public bool hasActiveInvestments(System.Guid clientID) {
            return base.Channel.hasActiveInvestments(clientID);
        }
        
        public System.Threading.Tasks.Task<bool> hasActiveInvestmentsAsync(System.Guid clientID) {
            return base.Channel.hasActiveInvestmentsAsync(clientID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MySecureZoneApp.Api.TyrusClientAuthService.AllLinkedActiveInvestmentsResponse MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService.AllLinkedActiveInvestments(MySecureZoneApp.Api.TyrusClientAuthService.AllLinkedActiveInvestmentsRequest request) {
            return base.Channel.AllLinkedActiveInvestments(request);
        }
        
        public bool AllLinkedActiveInvestments(System.Guid clientID, out bool linkAccountActiveInvestment, out System.Guid linkedClientID) {
            MySecureZoneApp.Api.TyrusClientAuthService.AllLinkedActiveInvestmentsRequest inValue = new MySecureZoneApp.Api.TyrusClientAuthService.AllLinkedActiveInvestmentsRequest();
            inValue.clientID = clientID;
            MySecureZoneApp.Api.TyrusClientAuthService.AllLinkedActiveInvestmentsResponse retVal = ((MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService)(this)).AllLinkedActiveInvestments(inValue);
            linkAccountActiveInvestment = retVal.linkAccountActiveInvestment;
            linkedClientID = retVal.linkedClientID;
            return retVal.AllLinkedActiveInvestmentsResult;
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.AllLinkedActiveInvestmentsResponse> AllLinkedActiveInvestmentsAsync(MySecureZoneApp.Api.TyrusClientAuthService.AllLinkedActiveInvestmentsRequest request) {
            return base.Channel.AllLinkedActiveInvestmentsAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MySecureZoneApp.Api.TyrusClientAuthService.hasClientGotValidatedWillResponse MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService.hasClientGotValidatedWill(MySecureZoneApp.Api.TyrusClientAuthService.hasClientGotValidatedWillRequest request) {
            return base.Channel.hasClientGotValidatedWill(request);
        }
        
        public bool hasClientGotValidatedWill(System.Guid partyID, out string reason) {
            MySecureZoneApp.Api.TyrusClientAuthService.hasClientGotValidatedWillRequest inValue = new MySecureZoneApp.Api.TyrusClientAuthService.hasClientGotValidatedWillRequest();
            inValue.partyID = partyID;
            MySecureZoneApp.Api.TyrusClientAuthService.hasClientGotValidatedWillResponse retVal = ((MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService)(this)).hasClientGotValidatedWill(inValue);
            reason = retVal.reason;
            return retVal.hasClientGotValidatedWillResult;
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.hasClientGotValidatedWillResponse> hasClientGotValidatedWillAsync(MySecureZoneApp.Api.TyrusClientAuthService.hasClientGotValidatedWillRequest request) {
            return base.Channel.hasClientGotValidatedWillAsync(request);
        }
        
        public System.Data.DataTable GetSecureZoneClientDetails(System.Guid partyID) {
            return base.Channel.GetSecureZoneClientDetails(partyID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSecureZoneClientDetailsAsync(System.Guid partyID) {
            return base.Channel.GetSecureZoneClientDetailsAsync(partyID);
        }
        
        public System.Data.DataTable GetSecureZoneClientGrid(string idNumber) {
            return base.Channel.GetSecureZoneClientGrid(idNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSecureZoneClientGridAsync(string idNumber) {
            return base.Channel.GetSecureZoneClientGridAsync(idNumber);
        }
        
        public bool UpdatePartyWebRegistrationStatus(System.Guid partyID, bool status) {
            return base.Channel.UpdatePartyWebRegistrationStatus(partyID, status);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePartyWebRegistrationStatusAsync(System.Guid partyID, bool status) {
            return base.Channel.UpdatePartyWebRegistrationStatusAsync(partyID, status);
        }
        
        public System.Data.DataSet Activate_ResetWebRegisteration(System.Guid partyID, System.Guid staffPartyID, int staffID) {
            return base.Channel.Activate_ResetWebRegisteration(partyID, staffPartyID, staffID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> Activate_ResetWebRegisterationAsync(System.Guid partyID, System.Guid staffPartyID, int staffID) {
            return base.Channel.Activate_ResetWebRegisterationAsync(partyID, staffPartyID, staffID);
        }
        
        public bool Deactivate_WebRegisteration(System.Guid partyID, System.Guid staffPartyID, int staffID) {
            return base.Channel.Deactivate_WebRegisteration(partyID, staffPartyID, staffID);
        }
        
        public System.Threading.Tasks.Task<bool> Deactivate_WebRegisterationAsync(System.Guid partyID, System.Guid staffPartyID, int staffID) {
            return base.Channel.Deactivate_WebRegisterationAsync(partyID, staffPartyID, staffID);
        }
        
        public System.Data.DataSet GetMySecureZoneActivities(System.Guid partyID) {
            return base.Channel.GetMySecureZoneActivities(partyID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMySecureZoneActivitiesAsync(System.Guid partyID) {
            return base.Channel.GetMySecureZoneActivitiesAsync(partyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MySecureZoneApp.Api.TyrusClientAuthService.AddWebActivityResponse MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService.AddWebActivity(MySecureZoneApp.Api.TyrusClientAuthService.AddWebActivityRequest request) {
            return base.Channel.AddWebActivity(request);
        }
        
        public bool AddWebActivity(System.Guid partyID, int activityL, string comment, out string ResultInfo) {
            MySecureZoneApp.Api.TyrusClientAuthService.AddWebActivityRequest inValue = new MySecureZoneApp.Api.TyrusClientAuthService.AddWebActivityRequest();
            inValue.partyID = partyID;
            inValue.activityL = activityL;
            inValue.comment = comment;
            MySecureZoneApp.Api.TyrusClientAuthService.AddWebActivityResponse retVal = ((MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService)(this)).AddWebActivity(inValue);
            ResultInfo = retVal.ResultInfo;
            return retVal.AddWebActivityResult;
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.AddWebActivityResponse> AddWebActivityAsync(MySecureZoneApp.Api.TyrusClientAuthService.AddWebActivityRequest request) {
            return base.Channel.AddWebActivityAsync(request);
        }
        
        public string EncryptClientID(System.Guid partyID) {
            return base.Channel.EncryptClientID(partyID);
        }
        
        public System.Threading.Tasks.Task<string> EncryptClientIDAsync(System.Guid partyID) {
            return base.Channel.EncryptClientIDAsync(partyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MySecureZoneApp.Api.TyrusClientAuthService.DecryptClientIDResponse MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService.DecryptClientID(MySecureZoneApp.Api.TyrusClientAuthService.DecryptClientIDRequest request) {
            return base.Channel.DecryptClientID(request);
        }
        
        public string DecryptClientID(string encryptedPartyID, bool checkExpireLink, out bool isLinkExpire, out string ExpireLinkMessage) {
            MySecureZoneApp.Api.TyrusClientAuthService.DecryptClientIDRequest inValue = new MySecureZoneApp.Api.TyrusClientAuthService.DecryptClientIDRequest();
            inValue.encryptedPartyID = encryptedPartyID;
            inValue.checkExpireLink = checkExpireLink;
            MySecureZoneApp.Api.TyrusClientAuthService.DecryptClientIDResponse retVal = ((MySecureZoneApp.Api.TyrusClientAuthService.IClientAuthService)(this)).DecryptClientID(inValue);
            isLinkExpire = retVal.isLinkExpire;
            ExpireLinkMessage = retVal.ExpireLinkMessage;
            return retVal.DecryptClientIDResult;
        }
        
        public System.Threading.Tasks.Task<MySecureZoneApp.Api.TyrusClientAuthService.DecryptClientIDResponse> DecryptClientIDAsync(MySecureZoneApp.Api.TyrusClientAuthService.DecryptClientIDRequest request) {
            return base.Channel.DecryptClientIDAsync(request);
        }
    }
}
